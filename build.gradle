plugins {
    id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'maven-publish'
    id 'pro.mikey.plugins.insaniam' version "0.1-SNAPSHOT"
    id "me.modmuss50.mod-publish-plugin" version "0.7.4"
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    version = project.mod_version
    group = project.maven_group

    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        maven { url "https://maven.terraformersmc.com/releases/"}
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
        it.options.encoding = "UTF-8"
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    // Configure Maven publishing.
    publishing {
        publications {}
        repositories {}
    }
}

def changelogData = insaniamUtils.createChangelog {
    file = file('CHANGELOG.md')
    versionPattern = ~/## \[[^]]+]/
    fallbackValue = "No changelog provided"
    version = project.mod_version
}

publishMods {
    def curseToken = providers.environmentVariable("CURSE_DEPLOY_TOKEN")

    dryRun = !curseToken.isPresent()
    changelog = changelogData
    version = project.mod_version
    type = STABLE

    github {
        file = project.provider { project(":neoforge").tasks.remapJar }.flatMap { it.archiveFile }
        additionalFiles.from project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        additionalFiles.from project.provider { project(":common").tasks.remapJar }.flatMap { it.archiveFile }

        repository = "AdvancedXRay/Auto-Clicker"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("main")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("v${mod_version}")
    }
}
